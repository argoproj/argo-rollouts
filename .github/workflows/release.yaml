name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Git tag to build release from
        required: true
jobs:
  release-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Get SHA
        id: get-sha
        run: echo "::set-output name=sha::$(git log -1 --format='%H')"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.get-sha.outputs.sha }}

      - name: Print Disk Usage
        run: |
          df -ah
          docker buildx du

      - name: Docker meta (controller)
        id: controller-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            quay.io/argoproj/argo-rollouts
          # ghcr.io/argoproj/argo-rollouts
          tags: |
            type=semver,pattern={{version}},prefix=v,value=${{ github.event.inputs.tag }}
          flavor: |
            latest=false

      - name: Docker meta (plugin)
        id: plugin-meta
        uses: docker/metadata-action@v3
        with:
          images: |
            quay.io/argoproj/kubectl-argo-rollouts
          #  ghcr.io/argoproj/kubectl-argo-rollouts
          tags: |
            type=semver,pattern={{version}},prefix=v,value=${{ github.event.inputs.tag }}
          flavor: |
            latest=false

      # - name: Login to GitHub Container Registry
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Quay.io
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Build and push (controller-image)
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.controller-meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Build and push (plugin-image)
        uses: docker/build-push-action@v2
        with:
          context: .
          target: kubectl-argo-rollouts
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.plugin-meta.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  release-artifacts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Generate release artifacts
        run: |
          make release-plugins
          make manifests IMAGE_TAG=${{ github.event.inputs.tag }}

      - name: Generate SBOM (spdx)
        id: spdx-builder
        env:
          # defines the https://github.com/opensbom-generator/spdx-sbom-generator
          # to use.
          SPDX_GEN_VERSION: v0.0.13
          # comma delimited list of project relative folders to inspect for package
          # managers (gomod, yarn, npm).
          PROJECT_FOLDERS: ".,./ui" 
        run: |
          yarn install --cwd ./ui
          wget -q https://github.com/opensbom-generator/spdx-sbom-generator/releases/download/$SPDX_GEN_VERSION/spdx-sbom-generator-$SPDX_GEN_VERSION-linux-386.tar.gz -O generator.tar.gz
          tar -zxf generator.tar.gz
          for folder in $(echo $PROJECT_FOLDERS | sed "s/,/ /g")
          do
            ./spdx-sbom-generator -p $folder -o /tmp
          done
          tar -zcf /tmp/sbom.tar.gz /tmp/*.spdx

      - name: Draft release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          draft: true
          files: |
            dist/kubectl-argo-rollouts-linux-amd64
            dist/kubectl-argo-rollouts-linux-arm64
            dist/kubectl-argo-rollouts-darwin-amd64
            dist/kubectl-argo-rollouts-windows-amd64
            manifests/dashboard-install.yaml
            manifests/install.yaml
            manifests/namespace-install.yaml
            manifests/notifications-install.yaml
            docs/features/kustomize/rollout_cr_schema.json
            /tmp/sbom.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
