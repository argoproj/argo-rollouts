// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apiclient/rollout/rollout.proto

package rollout

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-rollouts/pkg/apis/rollouts/v1alpha1"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RolloutQuery struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RolloutQuery) Reset()         { *m = RolloutQuery{} }
func (m *RolloutQuery) String() string { return proto.CompactTextString(m) }
func (*RolloutQuery) ProtoMessage()    {}
func (*RolloutQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{0}
}
func (m *RolloutQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolloutQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolloutQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolloutQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutQuery.Merge(m, src)
}
func (m *RolloutQuery) XXX_Size() int {
	return m.Size()
}
func (m *RolloutQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutQuery proto.InternalMessageInfo

func (m *RolloutQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SetImageQuery struct {
	Rollout              string   `protobuf:"bytes,1,opt,name=rollout,proto3" json:"rollout,omitempty"`
	Container            string   `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
	Image                string   `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Tag                  string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetImageQuery) Reset()         { *m = SetImageQuery{} }
func (m *SetImageQuery) String() string { return proto.CompactTextString(m) }
func (*SetImageQuery) ProtoMessage()    {}
func (*SetImageQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{1}
}
func (m *SetImageQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetImageQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetImageQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetImageQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetImageQuery.Merge(m, src)
}
func (m *SetImageQuery) XXX_Size() int {
	return m.Size()
}
func (m *SetImageQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SetImageQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SetImageQuery proto.InternalMessageInfo

func (m *SetImageQuery) GetRollout() string {
	if m != nil {
		return m.Rollout
	}
	return ""
}

func (m *SetImageQuery) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *SetImageQuery) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *SetImageQuery) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type UndoQuery struct {
	Rollout              string   `protobuf:"bytes,1,opt,name=rollout,proto3" json:"rollout,omitempty"`
	Revision             int64    `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UndoQuery) Reset()         { *m = UndoQuery{} }
func (m *UndoQuery) String() string { return proto.CompactTextString(m) }
func (*UndoQuery) ProtoMessage()    {}
func (*UndoQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{2}
}
func (m *UndoQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndoQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndoQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndoQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndoQuery.Merge(m, src)
}
func (m *UndoQuery) XXX_Size() int {
	return m.Size()
}
func (m *UndoQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_UndoQuery.DiscardUnknown(m)
}

var xxx_messageInfo_UndoQuery proto.InternalMessageInfo

func (m *UndoQuery) GetRollout() string {
	if m != nil {
		return m.Rollout
	}
	return ""
}

func (m *UndoQuery) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

type RolloutWatchEvent struct {
	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RolloutInfo          *v1alpha1.RolloutInfo `protobuf:"bytes,2,opt,name=rolloutInfo,proto3" json:"rolloutInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RolloutWatchEvent) Reset()         { *m = RolloutWatchEvent{} }
func (m *RolloutWatchEvent) String() string { return proto.CompactTextString(m) }
func (*RolloutWatchEvent) ProtoMessage()    {}
func (*RolloutWatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{3}
}
func (m *RolloutWatchEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolloutWatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolloutWatchEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolloutWatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutWatchEvent.Merge(m, src)
}
func (m *RolloutWatchEvent) XXX_Size() int {
	return m.Size()
}
func (m *RolloutWatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutWatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutWatchEvent proto.InternalMessageInfo

func (m *RolloutWatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RolloutWatchEvent) GetRolloutInfo() *v1alpha1.RolloutInfo {
	if m != nil {
		return m.RolloutInfo
	}
	return nil
}

type NamespaceInfo struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespaceInfo) Reset()         { *m = NamespaceInfo{} }
func (m *NamespaceInfo) String() string { return proto.CompactTextString(m) }
func (*NamespaceInfo) ProtoMessage()    {}
func (*NamespaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{4}
}
func (m *NamespaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceInfo.Merge(m, src)
}
func (m *NamespaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *NamespaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceInfo proto.InternalMessageInfo

func (m *NamespaceInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type RolloutInfoList struct {
	Rollouts             []*v1alpha1.RolloutInfo `protobuf:"bytes,1,rep,name=rollouts,proto3" json:"rollouts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RolloutInfoList) Reset()         { *m = RolloutInfoList{} }
func (m *RolloutInfoList) String() string { return proto.CompactTextString(m) }
func (*RolloutInfoList) ProtoMessage()    {}
func (*RolloutInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{5}
}
func (m *RolloutInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolloutInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolloutInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolloutInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolloutInfoList.Merge(m, src)
}
func (m *RolloutInfoList) XXX_Size() int {
	return m.Size()
}
func (m *RolloutInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_RolloutInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_RolloutInfoList proto.InternalMessageInfo

func (m *RolloutInfoList) GetRollouts() []*v1alpha1.RolloutInfo {
	if m != nil {
		return m.Rollouts
	}
	return nil
}

type VersionInfo struct {
	RolloutsVersion      string   `protobuf:"bytes,1,opt,name=rolloutsVersion,proto3" json:"rolloutsVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionInfo) Reset()         { *m = VersionInfo{} }
func (m *VersionInfo) String() string { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()    {}
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_99101d942e8912a7, []int{6}
}
func (m *VersionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VersionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VersionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VersionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionInfo.Merge(m, src)
}
func (m *VersionInfo) XXX_Size() int {
	return m.Size()
}
func (m *VersionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VersionInfo proto.InternalMessageInfo

func (m *VersionInfo) GetRolloutsVersion() string {
	if m != nil {
		return m.RolloutsVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*RolloutQuery)(nil), "rollout.RolloutQuery")
	proto.RegisterType((*SetImageQuery)(nil), "rollout.SetImageQuery")
	proto.RegisterType((*UndoQuery)(nil), "rollout.UndoQuery")
	proto.RegisterType((*RolloutWatchEvent)(nil), "rollout.RolloutWatchEvent")
	proto.RegisterType((*NamespaceInfo)(nil), "rollout.NamespaceInfo")
	proto.RegisterType((*RolloutInfoList)(nil), "rollout.RolloutInfoList")
	proto.RegisterType((*VersionInfo)(nil), "rollout.VersionInfo")
}

func init() {
	proto.RegisterFile("pkg/apiclient/rollout/rollout.proto", fileDescriptor_99101d942e8912a7)
}

var fileDescriptor_99101d942e8912a7 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0x67, 0x9b, 0x6a, 0xdb, 0x97, 0xb4, 0x69, 0xc7, 0x5a, 0xd7, 0x58, 0x42, 0x59, 0x45, 0x6a,
	0xa5, 0xbb, 0x4d, 0x3d, 0x14, 0x44, 0x0f, 0x2d, 0x94, 0x52, 0x28, 0x52, 0x53, 0x54, 0xec, 0x45,
	0x26, 0xe9, 0x74, 0xbb, 0x36, 0x99, 0x59, 0x66, 0x27, 0xd1, 0x10, 0x72, 0x11, 0xbc, 0x7a, 0xd1,
	0x83, 0x9f, 0xc6, 0xb3, 0x47, 0xc1, 0x2f, 0x20, 0xc5, 0x0f, 0x22, 0x33, 0x3b, 0x33, 0x49, 0x17,
	0x96, 0x8a, 0x04, 0x4f, 0x99, 0xf7, 0x66, 0xf7, 0xf7, 0xfb, 0xbd, 0xbf, 0x59, 0xb8, 0x1b, 0x9f,
	0x87, 0x01, 0x8e, 0xa3, 0x66, 0x2b, 0x22, 0x54, 0x04, 0x9c, 0xb5, 0x5a, 0xac, 0x63, 0x7f, 0xfd,
	0x98, 0x33, 0xc1, 0xd0, 0x94, 0x36, 0x2b, 0xcb, 0x21, 0x63, 0x61, 0x8b, 0xc8, 0x17, 0x02, 0x4c,
	0x29, 0x13, 0x58, 0x44, 0x8c, 0x26, 0xe9, 0x63, 0x95, 0x83, 0x30, 0x12, 0x67, 0x9d, 0x86, 0xdf,
	0x64, 0xed, 0x00, 0xf3, 0x90, 0xc5, 0x9c, 0xbd, 0x55, 0x87, 0x75, 0xfd, 0x7e, 0x12, 0x68, 0xb6,
	0x24, 0xb0, 0x9e, 0x6e, 0x0d, 0xb7, 0xe2, 0x33, 0x5c, 0x0b, 0x42, 0x42, 0x09, 0xc7, 0x82, 0x9c,
	0x68, 0xb4, 0x3b, 0x9a, 0x4b, 0x59, 0x8d, 0xce, 0x69, 0x40, 0xda, 0xb1, 0xe8, 0xa5, 0x97, 0x9e,
	0x07, 0xa5, 0x7a, 0x8a, 0xf0, 0xbc, 0x43, 0x78, 0x0f, 0x21, 0x98, 0xa4, 0xb8, 0x4d, 0x5c, 0x67,
	0xc5, 0x59, 0x9d, 0xa9, 0xab, 0xb3, 0xc7, 0x60, 0xf6, 0x88, 0x88, 0xfd, 0x36, 0x0e, 0x49, 0xfa,
	0x90, 0x0b, 0x26, 0x10, 0xfd, 0x9c, 0x31, 0xd1, 0x32, 0xcc, 0x34, 0x19, 0x15, 0x38, 0xa2, 0x84,
	0xbb, 0x13, 0xea, 0x6e, 0xe8, 0x40, 0x8b, 0x70, 0x2d, 0x92, 0x28, 0x6e, 0x41, 0xdd, 0xa4, 0x06,
	0x9a, 0x87, 0x82, 0xc0, 0xa1, 0x3b, 0xa9, 0x7c, 0xf2, 0xe8, 0x6d, 0xc3, 0xcc, 0x0b, 0x7a, 0xc2,
	0xae, 0x22, 0xab, 0xc0, 0x34, 0x27, 0xdd, 0x28, 0x89, 0x18, 0x55, 0x5c, 0x85, 0xba, 0xb5, 0xbd,
	0x2f, 0x0e, 0x2c, 0xe8, 0xc0, 0x5e, 0x61, 0xd1, 0x3c, 0xdb, 0xed, 0x12, 0x2a, 0x64, 0x74, 0xa2,
	0x17, 0xdb, 0xe8, 0xe4, 0x19, 0x9d, 0x43, 0x51, 0x03, 0xee, 0xd3, 0x53, 0xa6, 0x80, 0x8a, 0x9b,
	0xfb, 0xfe, 0xb0, 0x04, 0xbe, 0x29, 0x81, 0x3a, 0xbc, 0x31, 0x09, 0xf7, 0xe3, 0xf3, 0xd0, 0x97,
	0x25, 0xf0, 0xad, 0xc7, 0x94, 0xc0, 0xaf, 0x0f, 0x01, 0xeb, 0xa3, 0xe8, 0xde, 0x3a, 0xcc, 0x3e,
	0xc3, 0x6d, 0x92, 0xc4, 0xb8, 0x49, 0xa4, 0x43, 0x26, 0x8c, 0x1a, 0x87, 0x96, 0x35, 0x74, 0x78,
	0xef, 0xa1, 0x3c, 0x02, 0x75, 0x10, 0x25, 0x02, 0x11, 0x98, 0x36, 0x7c, 0xae, 0xb3, 0x52, 0x18,
	0xaf, 0x56, 0x0b, 0xed, 0x6d, 0x41, 0xf1, 0x25, 0xe1, 0x32, 0x95, 0x4a, 0xe6, 0x2a, 0x94, 0xcd,
	0x95, 0x76, 0x6b, 0xb1, 0x59, 0xf7, 0xe6, 0x37, 0x80, 0x39, 0x0d, 0x79, 0x44, 0x78, 0x37, 0x6a,
	0x12, 0xf4, 0xc9, 0x01, 0xd8, 0x23, 0x42, 0x7b, 0xd1, 0x4d, 0x23, 0xc2, 0x1f, 0xed, 0xbc, 0xca,
	0xf8, 0xc2, 0xf0, 0xaa, 0x1f, 0x7e, 0xfe, 0xfe, 0x3c, 0xe1, 0xa2, 0x25, 0x35, 0x5f, 0xdd, 0x9a,
	0x9d, 0xc6, 0xbe, 0x4c, 0xed, 0x00, 0x7d, 0x75, 0xa0, 0xa4, 0xba, 0xe2, 0xff, 0x49, 0xba, 0xa7,
	0x24, 0x55, 0xd1, 0x72, 0x56, 0xd2, 0x3b, 0xa9, 0x43, 0x0b, 0xdb, 0x70, 0xd0, 0x31, 0x94, 0x64,
	0x99, 0xf5, 0xab, 0x09, 0x5a, 0xf2, 0xd3, 0xe9, 0xf5, 0xcd, 0xf4, 0xfa, 0xbb, 0x72, 0x7a, 0x2b,
	0x6e, 0x56, 0xb1, 0x69, 0x10, 0xcf, 0x55, 0x4c, 0x08, 0xcd, 0x67, 0x98, 0x12, 0x44, 0x60, 0x76,
	0x34, 0xea, 0x7c, 0xf0, 0x4a, 0x16, 0x7c, 0x38, 0x42, 0xb9, 0xb9, 0x4d, 0xd2, 0x48, 0x36, 0x1c,
	0xf4, 0x1a, 0x4a, 0x7b, 0x44, 0xd8, 0x36, 0xcf, 0x65, 0x59, 0xb2, 0x2c, 0x97, 0x46, 0xc2, 0xbb,
	0xad, 0x18, 0x6e, 0xa0, 0x05, 0xc3, 0x60, 0xe7, 0x01, 0x85, 0x30, 0x57, 0x27, 0x89, 0xc0, 0xfc,
	0xaa, 0x66, 0xca, 0xe1, 0xf4, 0xee, 0x2b, 0xec, 0x15, 0x54, 0xcd, 0x96, 0x81, 0xa7, 0xb0, 0xa6,
	0x43, 0x42, 0x98, 0x3b, 0xe4, 0xac, 0xcd, 0x04, 0x19, 0x37, 0x51, 0x9c, 0xc2, 0x1a, 0xa2, 0x26,
	0x94, 0xb6, 0x1b, 0xec, 0x9f, 0xe3, 0xc9, 0x6d, 0x2b, 0x2c, 0x41, 0x0d, 0xc9, 0x47, 0x07, 0xca,
	0x47, 0x76, 0x00, 0xd5, 0x22, 0x47, 0xc3, 0xec, 0x5f, 0xda, 0xed, 0xb9, 0x4c, 0x3b, 0x8a, 0xe9,
	0x09, 0x7a, 0x9c, 0x65, 0x4a, 0x88, 0x08, 0xfa, 0xda, 0x18, 0x04, 0x7d, 0xbb, 0xed, 0x07, 0x41,
	0x5f, 0xed, 0xf7, 0xa7, 0x6b, 0x6b, 0x83, 0xa0, 0x2f, 0x70, 0x38, 0x40, 0x2d, 0x28, 0xca, 0xbd,
	0x6e, 0x62, 0x45, 0x56, 0x82, 0xdd, 0xf6, 0xb9, 0xf4, 0x35, 0x45, 0xff, 0x10, 0x3d, 0xc8, 0xd2,
	0x77, 0xe8, 0x09, 0x1b, 0xe5, 0x37, 0xff, 0x00, 0x2a, 0xb5, 0x75, 0x22, 0x78, 0x6f, 0xdc, 0xa9,
	0xe5, 0x12, 0xd4, 0xa4, 0xf6, 0x10, 0xa6, 0xf4, 0xe6, 0xcb, 0xed, 0xf3, 0x45, 0xcb, 0x3b, 0xb2,
	0x51, 0xbd, 0x5b, 0x0a, 0x7e, 0x01, 0x95, 0x0d, 0x7c, 0x37, 0xbd, 0xdc, 0xd9, 0xfd, 0x7e, 0x51,
	0x75, 0x7e, 0x5c, 0x54, 0x9d, 0x5f, 0x17, 0x55, 0xe7, 0x78, 0xeb, 0xaf, 0x3f, 0x05, 0x2e, 0x7f,
	0x78, 0x34, 0xae, 0x2b, 0x15, 0x8f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x5e, 0xd5, 0x8f,
	0x98, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RolloutServiceClient is the client API for RolloutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RolloutServiceClient interface {
	// Get returns a rollout
	GetRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*v1alpha1.RolloutInfo, error)
	WatchRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (RolloutService_WatchRolloutClient, error)
	ListRollouts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RolloutInfoList, error)
	WatchRollouts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (RolloutService_WatchRolloutsClient, error)
	GetNamespace(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NamespaceInfo, error)
	RestartRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error)
	PromoteRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error)
	AbortRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error)
	SetRolloutImage(ctx context.Context, in *SetImageQuery, opts ...grpc.CallOption) (*empty.Empty, error)
	UndoRollout(ctx context.Context, in *UndoQuery, opts ...grpc.CallOption) (*empty.Empty, error)
	RetryRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error)
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionInfo, error)
}

type rolloutServiceClient struct {
	cc *grpc.ClientConn
}

func NewRolloutServiceClient(cc *grpc.ClientConn) RolloutServiceClient {
	return &rolloutServiceClient{cc}
}

func (c *rolloutServiceClient) GetRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*v1alpha1.RolloutInfo, error) {
	out := new(v1alpha1.RolloutInfo)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/GetRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) WatchRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (RolloutService_WatchRolloutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RolloutService_serviceDesc.Streams[0], "/rollout.RolloutService/WatchRollout", opts...)
	if err != nil {
		return nil, err
	}
	x := &rolloutServiceWatchRolloutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolloutService_WatchRolloutClient interface {
	Recv() (*v1alpha1.RolloutInfo, error)
	grpc.ClientStream
}

type rolloutServiceWatchRolloutClient struct {
	grpc.ClientStream
}

func (x *rolloutServiceWatchRolloutClient) Recv() (*v1alpha1.RolloutInfo, error) {
	m := new(v1alpha1.RolloutInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolloutServiceClient) ListRollouts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*RolloutInfoList, error) {
	out := new(RolloutInfoList)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/ListRollouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) WatchRollouts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (RolloutService_WatchRolloutsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RolloutService_serviceDesc.Streams[1], "/rollout.RolloutService/WatchRollouts", opts...)
	if err != nil {
		return nil, err
	}
	x := &rolloutServiceWatchRolloutsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RolloutService_WatchRolloutsClient interface {
	Recv() (*RolloutWatchEvent, error)
	grpc.ClientStream
}

type rolloutServiceWatchRolloutsClient struct {
	grpc.ClientStream
}

func (x *rolloutServiceWatchRolloutsClient) Recv() (*RolloutWatchEvent, error) {
	m := new(RolloutWatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolloutServiceClient) GetNamespace(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NamespaceInfo, error) {
	out := new(NamespaceInfo)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) RestartRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/RestartRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) PromoteRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/PromoteRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) AbortRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/AbortRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) SetRolloutImage(ctx context.Context, in *SetImageQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/SetRolloutImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) UndoRollout(ctx context.Context, in *UndoQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/UndoRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) RetryRollout(ctx context.Context, in *RolloutQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/RetryRollout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolloutServiceClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/rollout.RolloutService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolloutServiceServer is the server API for RolloutService service.
type RolloutServiceServer interface {
	// Get returns a rollout
	GetRollout(context.Context, *RolloutQuery) (*v1alpha1.RolloutInfo, error)
	WatchRollout(*RolloutQuery, RolloutService_WatchRolloutServer) error
	ListRollouts(context.Context, *empty.Empty) (*RolloutInfoList, error)
	WatchRollouts(*empty.Empty, RolloutService_WatchRolloutsServer) error
	GetNamespace(context.Context, *empty.Empty) (*NamespaceInfo, error)
	RestartRollout(context.Context, *RolloutQuery) (*empty.Empty, error)
	PromoteRollout(context.Context, *RolloutQuery) (*empty.Empty, error)
	AbortRollout(context.Context, *RolloutQuery) (*empty.Empty, error)
	SetRolloutImage(context.Context, *SetImageQuery) (*empty.Empty, error)
	UndoRollout(context.Context, *UndoQuery) (*empty.Empty, error)
	RetryRollout(context.Context, *RolloutQuery) (*empty.Empty, error)
	Version(context.Context, *empty.Empty) (*VersionInfo, error)
}

// UnimplementedRolloutServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRolloutServiceServer struct {
}

func (*UnimplementedRolloutServiceServer) GetRollout(ctx context.Context, req *RolloutQuery) (*v1alpha1.RolloutInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) WatchRollout(req *RolloutQuery, srv RolloutService_WatchRolloutServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) ListRollouts(ctx context.Context, req *empty.Empty) (*RolloutInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRollouts not implemented")
}
func (*UnimplementedRolloutServiceServer) WatchRollouts(req *empty.Empty, srv RolloutService_WatchRolloutsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchRollouts not implemented")
}
func (*UnimplementedRolloutServiceServer) GetNamespace(ctx context.Context, req *empty.Empty) (*NamespaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (*UnimplementedRolloutServiceServer) RestartRollout(ctx context.Context, req *RolloutQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) PromoteRollout(ctx context.Context, req *RolloutQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) AbortRollout(ctx context.Context, req *RolloutQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) SetRolloutImage(ctx context.Context, req *SetImageQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRolloutImage not implemented")
}
func (*UnimplementedRolloutServiceServer) UndoRollout(ctx context.Context, req *UndoQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndoRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) RetryRollout(ctx context.Context, req *RolloutQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryRollout not implemented")
}
func (*UnimplementedRolloutServiceServer) Version(ctx context.Context, req *empty.Empty) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

func RegisterRolloutServiceServer(s *grpc.Server, srv RolloutServiceServer) {
	s.RegisterService(&_RolloutService_serviceDesc, srv)
}

func _RolloutService_GetRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).GetRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/GetRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).GetRollout(ctx, req.(*RolloutQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_WatchRollout_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RolloutQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolloutServiceServer).WatchRollout(m, &rolloutServiceWatchRolloutServer{stream})
}

type RolloutService_WatchRolloutServer interface {
	Send(*v1alpha1.RolloutInfo) error
	grpc.ServerStream
}

type rolloutServiceWatchRolloutServer struct {
	grpc.ServerStream
}

func (x *rolloutServiceWatchRolloutServer) Send(m *v1alpha1.RolloutInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _RolloutService_ListRollouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).ListRollouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/ListRollouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).ListRollouts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_WatchRollouts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RolloutServiceServer).WatchRollouts(m, &rolloutServiceWatchRolloutsServer{stream})
}

type RolloutService_WatchRolloutsServer interface {
	Send(*RolloutWatchEvent) error
	grpc.ServerStream
}

type rolloutServiceWatchRolloutsServer struct {
	grpc.ServerStream
}

func (x *rolloutServiceWatchRolloutsServer) Send(m *RolloutWatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RolloutService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).GetNamespace(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_RestartRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).RestartRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/RestartRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).RestartRollout(ctx, req.(*RolloutQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_PromoteRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).PromoteRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/PromoteRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).PromoteRollout(ctx, req.(*RolloutQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_AbortRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).AbortRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/AbortRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).AbortRollout(ctx, req.(*RolloutQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_SetRolloutImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetImageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).SetRolloutImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/SetRolloutImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).SetRolloutImage(ctx, req.(*SetImageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_UndoRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).UndoRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/UndoRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).UndoRollout(ctx, req.(*UndoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_RetryRollout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolloutQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).RetryRollout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/RetryRollout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).RetryRollout(ctx, req.(*RolloutQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolloutService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolloutServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rollout.RolloutService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolloutServiceServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RolloutService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rollout.RolloutService",
	HandlerType: (*RolloutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRollout",
			Handler:    _RolloutService_GetRollout_Handler,
		},
		{
			MethodName: "ListRollouts",
			Handler:    _RolloutService_ListRollouts_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _RolloutService_GetNamespace_Handler,
		},
		{
			MethodName: "RestartRollout",
			Handler:    _RolloutService_RestartRollout_Handler,
		},
		{
			MethodName: "PromoteRollout",
			Handler:    _RolloutService_PromoteRollout_Handler,
		},
		{
			MethodName: "AbortRollout",
			Handler:    _RolloutService_AbortRollout_Handler,
		},
		{
			MethodName: "SetRolloutImage",
			Handler:    _RolloutService_SetRolloutImage_Handler,
		},
		{
			MethodName: "UndoRollout",
			Handler:    _RolloutService_UndoRollout_Handler,
		},
		{
			MethodName: "RetryRollout",
			Handler:    _RolloutService_RetryRollout_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _RolloutService_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRollout",
			Handler:       _RolloutService_WatchRollout_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchRollouts",
			Handler:       _RolloutService_WatchRollouts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apiclient/rollout/rollout.proto",
}

func (m *RolloutQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolloutQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetImageQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetImageQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetImageQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rollout) > 0 {
		i -= len(m.Rollout)
		copy(dAtA[i:], m.Rollout)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Rollout)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndoQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndoQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndoQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Revision != 0 {
		i = encodeVarintRollout(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rollout) > 0 {
		i -= len(m.Rollout)
		copy(dAtA[i:], m.Rollout)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Rollout)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolloutWatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutWatchEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolloutWatchEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RolloutInfo != nil {
		{
			size, err := m.RolloutInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRollout(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamespaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespaceInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespaceInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolloutInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolloutInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolloutInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rollouts) > 0 {
		for iNdEx := len(m.Rollouts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rollouts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRollout(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VersionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VersionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VersionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RolloutsVersion) > 0 {
		i -= len(m.RolloutsVersion)
		copy(dAtA[i:], m.RolloutsVersion)
		i = encodeVarintRollout(dAtA, i, uint64(len(m.RolloutsVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRollout(dAtA []byte, offset int, v uint64) int {
	offset -= sovRollout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RolloutQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetImageQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rollout)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UndoQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rollout)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.Revision != 0 {
		n += 1 + sovRollout(uint64(m.Revision))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RolloutWatchEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.RolloutInfo != nil {
		l = m.RolloutInfo.Size()
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NamespaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RolloutInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rollouts) > 0 {
		for _, e := range m.Rollouts {
			l = e.Size()
			n += 1 + l + sovRollout(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VersionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RolloutsVersion)
	if l > 0 {
		n += 1 + l + sovRollout(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRollout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRollout(x uint64) (n int) {
	return sovRollout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RolloutQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetImageQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetImageQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetImageQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndoQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndoQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndoQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutWatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutWatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutWatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolloutInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RolloutInfo == nil {
				m.RolloutInfo = &v1alpha1.RolloutInfo{}
			}
			if err := m.RolloutInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolloutInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolloutInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolloutInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rollouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rollouts = append(m.Rollouts, &v1alpha1.RolloutInfo{})
			if err := m.Rollouts[len(m.Rollouts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VersionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VersionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VersionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RolloutsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRollout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRollout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RolloutsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRollout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRollout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRollout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRollout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRollout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRollout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRollout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRollout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRollout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRollout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRollout = fmt.Errorf("proto: unexpected end of group")
)
