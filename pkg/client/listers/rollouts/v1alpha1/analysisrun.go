/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-rollouts/pkg/apis/rollouts/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AnalysisRunLister helps list AnalysisRuns.
// All objects returned here must be treated as read-only.
type AnalysisRunLister interface {
	// List lists all AnalysisRuns in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalysisRun, err error)
	// AnalysisRuns returns an object that can list and get AnalysisRuns.
	AnalysisRuns(namespace string) AnalysisRunNamespaceLister
	AnalysisRunListerExpansion
}

// analysisRunLister implements the AnalysisRunLister interface.
type analysisRunLister struct {
	indexer cache.Indexer
}

// NewAnalysisRunLister returns a new AnalysisRunLister.
func NewAnalysisRunLister(indexer cache.Indexer) AnalysisRunLister {
	return &analysisRunLister{indexer: indexer}
}

// List lists all AnalysisRuns in the indexer.
func (s *analysisRunLister) List(selector labels.Selector) (ret []*v1alpha1.AnalysisRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalysisRun))
	})
	return ret, err
}

// AnalysisRuns returns an object that can list and get AnalysisRuns.
func (s *analysisRunLister) AnalysisRuns(namespace string) AnalysisRunNamespaceLister {
	return analysisRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AnalysisRunNamespaceLister helps list and get AnalysisRuns.
// All objects returned here must be treated as read-only.
type AnalysisRunNamespaceLister interface {
	// List lists all AnalysisRuns in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AnalysisRun, err error)
	// Get retrieves the AnalysisRun from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AnalysisRun, error)
	AnalysisRunNamespaceListerExpansion
}

// analysisRunNamespaceLister implements the AnalysisRunNamespaceLister
// interface.
type analysisRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AnalysisRuns in the indexer for a given namespace.
func (s analysisRunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AnalysisRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AnalysisRun))
	})
	return ret, err
}

// Get retrieves the AnalysisRun from the indexer for a given namespace and name.
func (s analysisRunNamespaceLister) Get(name string) (*v1alpha1.AnalysisRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("analysisrun"), name)
	}
	return obj.(*v1alpha1.AnalysisRun), nil
}
