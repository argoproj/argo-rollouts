// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	plugin "github.com/argoproj/argo-rollouts/rollout/steps/plugin"

	v1alpha1 "github.com/argoproj/argo-rollouts/pkg/apis/rollouts/v1alpha1"
)

// Resolver is an autogenerated mock type for the Resolver type
type Resolver struct {
	mock.Mock
}

// Resolve provides a mock function with given fields: index, _a1, log
func (_m *Resolver) Resolve(index int32, _a1 v1alpha1.PluginStep, log *logrus.Entry) (plugin.StepPlugin, error) {
	ret := _m.Called(index, _a1, log)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 plugin.StepPlugin
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, v1alpha1.PluginStep, *logrus.Entry) (plugin.StepPlugin, error)); ok {
		return rf(index, _a1, log)
	}
	if rf, ok := ret.Get(0).(func(int32, v1alpha1.PluginStep, *logrus.Entry) plugin.StepPlugin); ok {
		r0 = rf(index, _a1, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugin.StepPlugin)
		}
	}

	if rf, ok := ret.Get(1).(func(int32, v1alpha1.PluginStep, *logrus.Entry) error); ok {
		r1 = rf(index, _a1, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewResolver creates a new instance of Resolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *Resolver {
	mock := &Resolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
