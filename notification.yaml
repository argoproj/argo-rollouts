# This example demonstrates a Rollout using the canary update strategy with a customized rollout
# plan. The prescribed steps initially sets a canary weight of 20%, then pauses indefinitely. Once
# resumed, the rollout performs a gradual, automated 20% weight increase until it reaches 100%.
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
 name: rollout-canary
spec:
 replicas: 5
 revisionHistoryLimit: 2
 selector:
   matchLabels:
     app: rollout-canary
 template:
   metadata:
     labels:
       app: rollout-canary
   spec:
     containers:
     - name: rollouts-demo
       image: argoproj/rollouts-demo:blue
       imagePullPolicy: Always
       ports:
       - containerPort: 8080
 # Notification Reference
   notifications:
      # subscriptions
      events:
      - event: OnAbort # magic key word (valid values: OnStart, OnAbort, OnSuccess, All) <- triggers (+ Canary Steps)
        notificationRef:
          name: jesse-notifs
          eventTemplateName: abort
      - event: All
        notificationRef:
          name: jesse-notifs
          eventTemplateName: ace
          # args:
          # - name: whatevent
          #   valueFrom:
          #     eventName: {}

#      - event: OnSuccess
#        notificationRef:
#          name: kareena-notifs
#          eventTemplate:
   strategy:
     canary:
       steps:
       - setWeight: 20
       - analysis:
           templates:
           - name: foo
       - notification: # notify that AR completes + RO is paused -> informed based on prev & subsequent step
          notificationRef:
            name: jesse-notifs
            templateRef: canary-notify-jesse
       - pause: {}
---
apiVersion: argoproj.io/v1alpha1
kind: Notification
metadata:
  name: jesse-notifs
spec:
  recipients:
  # authentication information
  - name: jesse-slack
    slack:
      url: http://slack.com/XXXX/00000
      # GoLang templating (parametrized)
      attachments: |
        [{
          "title": "{{.app.metadata.name}}",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "#18be52",
          "fields": [{
            "title": "Sync Status",
            "value": "{{.app.status.sync.status}}",
            "short": true
          }, {
            "title": "Repository",
            "value": "{{.app.spec.source.repoURL}}",
            "short": true
          }]
        }]

  - name: jesse-grafana
    grafana:
      url: http://grafana.com/jesse-grafana
      api-key:
        secretKeyRef:
          name: login
          key: password
  # message formatting
  - name: jesse-email
    email:
      smtp: outlook.com:1234
      to: "{{mailing-list}}"
      from: argo-rollouts@intuit.com
      body: "{{message}}"
  - name: ace-server
    webhook:
      url: http://ace.com
      body: |
        {
          "rollout": "{{rollout-conditions}}"
        }

  # how to format for different notification systems?
  eventTemplate:
  - name: canary-notify-jesse
    recipients:
    - name: jesse-slack
    - name: jesse-grafana
    - name: jesse-email
    args:
    - name: message
      value: "analysis is complete and we are paused"
    - name: mailing-list
      value: argo-devs@inuit.com
  - name: ace
    recipients:
    - name: ace-server
    args:
    # Pass them RO?
    # How to give info about all possible events?
    - name: whatevent
    # Create special var event in RO Controller
      value: "{{event.kind}}"
    - name: whattime
      value: "{{event.timestamp}}"
    - name: rollout-conditions
      value: "{{event.object.status.conditions}}"

---

# Notification Example
# How to coordinate "default" notifications? Will I have to keep referencing Notification CRD in RO controller?
apiVersion: argoproj.io/v1alpha1
kind: Notification
metadata:
  name: my-notifs
spec:
 # specify notifiers
  notifiers:
  - name: ace
    webhook:
      url: http://ace.intuit.com
      headers:
      - key: Authorization
        valueFrom:
          secretKeyRef:
            name: token-secret
            key: apiToken
  # won't implement email
  - name: email
    email:
      smtp: outlook.com
  - name: slack
    slack:
      url: http://slack-example1.com
      channel: argo-support
      api-key:
        valueFrom:
          secretKeyRef:
            name: slack-api-key
            key: token
  # specify message templates for various events
  eventTemplate:
  - name: ace
    notifiers:
    - name:
        slack:
    - webhook:
    title: :-)
    body: |
      alsdfjaslkdfjasdf
  - name: abort
    notifier: slack
    title: :-(
    body: |
      alsdkfjalksdfjaskdfjdfkdjfdkfj


---

# Notification Example
apiVersion: argoproj.io/v1alpha1
kind: Notification
metadata:
  name: ace-notifs
spec:
 # specify notifiers
  notifiers:

  - name: web
    webhook:
      url: http://ace.intuit.com
      headers:
      - key: Authorization
        valueFrom:
          secretKeyRef:
            name: token-secret
            key: apiToken
  - name: slack
    slack:
      url: http://slack.com/ace-team-channel
      channel: ace-team-channel
      api-key:
        valueFrom:
          secretKeyRef:
            name: ace-slack-api-key
            key: token
  # specify message templates for various events
  eventTemplate:
  - name: all-events
    notifiers:
    - slack
    - webhook
    title: all-events
    body: |
      This is a stream of events
      Here is what is currently happening : {}
- name: abort
  notifiers:
  - webhook
  title: "Rollout is aborted"
  body: |
    Your Rollout {} aborted due to {}

-------
# Body of JSON Payload?
 {
   event: "Canary Step"
   timestamp: "XXXXX"
   message: "AanalysisRun '' for Rollout '' has failed"
 }

#  metrics:
#    - name: web
#      interval: 5s
#      successCondition: result.major == '1'
#      provider:
#        web:
#          url: https://kubernetes.default.svc/version
#          insecure: true



