/**
 * pkg/apiclient/rollout/rollout.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("RolloutServiceApi", () => {
  let instance: api.RolloutServiceApi
  beforeEach(function() {
    instance = new api.RolloutServiceApi(config)
  });

  test("abortRollout", () => {
    const name: string = "name_example"
    return expect(instance.abortRollout(name, {})).resolves.toBe(null)
  })
  test("getNamespace", () => {
    return expect(instance.getNamespace({})).resolves.toBe(null)
  })
  test("getRollout", () => {
    const name: string = "name_example"
    return expect(instance.getRollout(name, {})).resolves.toBe(null)
  })
  test("listRollouts", () => {
    return expect(instance.listRollouts({})).resolves.toBe(null)
  })
  test("promoteRollout", () => {
    const name: string = "name_example"
    return expect(instance.promoteRollout(name, {})).resolves.toBe(null)
  })
  test("restartRollout", () => {
    const name: string = "name_example"
    return expect(instance.restartRollout(name, {})).resolves.toBe(null)
  })
  test("retryRollout", () => {
    const name: string = "name_example"
    return expect(instance.retryRollout(name, {})).resolves.toBe(null)
  })
  test("setRolloutImage", () => {
    const rollout: string = "rollout_example"
    const container: string = "container_example"
    const image: string = "image_example"
    const tag: string = "tag_example"
    return expect(instance.setRolloutImage(rollout, container, image, tag, {})).resolves.toBe(null)
  })
  test("undoRollout", () => {
    const rollout: string = "rollout_example"
    const revision: string = "revision_example"
    return expect(instance.undoRollout(rollout, revision, {})).resolves.toBe(null)
  })
  test("watchRollout", () => {
    const name: string = "name_example"
    return expect(instance.watchRollout(name, {})).resolves.toBe(null)
  })
  test("watchRollouts", () => {
    return expect(instance.watchRollouts({})).resolves.toBe(null)
  })
})

