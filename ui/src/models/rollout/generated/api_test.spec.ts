/**
 * pkg/apiclient/rollout/rollout.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("RolloutServiceApi", () => {
  let instance: api.RolloutServiceApi
  beforeEach(function() {
    instance = new api.RolloutServiceApi(config)
  });

  test("abortRollout", () => {
    const body: api.RolloutAbortRolloutRequest = undefined
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.abortRollout(body, namespace, name, {})).resolves.toBe(null)
  })
  test("getNamespace", () => {
    return expect(instance.getNamespace({})).resolves.toBe(null)
  })
  test("getRolloutInfo", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.getRolloutInfo(namespace, name, {})).resolves.toBe(null)
  })
  test("listRolloutInfos", () => {
    const namespace: string = "namespace_example"
    return expect(instance.listRolloutInfos(namespace, {})).resolves.toBe(null)
  })
  test("promoteRollout", () => {
    const body: api.RolloutPromoteRolloutRequest = undefined
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.promoteRollout(body, namespace, name, {})).resolves.toBe(null)
  })
  test("restartRollout", () => {
    const body: api.RolloutRestartRolloutRequest = undefined
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.restartRollout(body, namespace, name, {})).resolves.toBe(null)
  })
  test("retryRollout", () => {
    const body: api.RolloutRetryRolloutRequest = undefined
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.retryRollout(body, namespace, name, {})).resolves.toBe(null)
  })
  test("setRolloutImage", () => {
    const body: api.RolloutSetImageRequest = undefined
    const namespace: string = "namespace_example"
    const rollout: string = "rollout_example"
    const container: string = "container_example"
    const image: string = "image_example"
    const tag: string = "tag_example"
    return expect(instance.setRolloutImage(body, namespace, rollout, container, image, tag, {})).resolves.toBe(null)
  })
  test("undoRollout", () => {
    const body: api.RolloutUndoRolloutRequest = undefined
    const namespace: string = "namespace_example"
    const rollout: string = "rollout_example"
    const revision: string = "revision_example"
    return expect(instance.undoRollout(body, namespace, rollout, revision, {})).resolves.toBe(null)
  })
  test("version", () => {
    return expect(instance.version({})).resolves.toBe(null)
  })
  test("watchRolloutInfo", () => {
    const namespace: string = "namespace_example"
    const name: string = "name_example"
    return expect(instance.watchRolloutInfo(namespace, name, {})).resolves.toBe(null)
  })
  test("watchRolloutInfos", () => {
    const namespace: string = "namespace_example"
    return expect(instance.watchRolloutInfos(namespace, {})).resolves.toBe(null)
  })
})

